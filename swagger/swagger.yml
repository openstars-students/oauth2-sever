swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /authorize/:
    post:
      tags:
      - authorize
      description: create users
      operationId: AuthController.auth token
      parameters:
      - in: body
        name: response_type
        description: The key for staticblock
        required: true
        schema:
          $ref: '#/definitions/path'
        default: string
      - in: body
        name: client_id
        description: The key for staticblock
        required: true
        schema:
          $ref: '#/definitions/path'
        default: string
      - in: body
        name: username
        description: The key for staticblock
        required: true
        schema:
          $ref: '#/definitions/path'
        default: string
      - in: body
        name: redirect_uri
        description: The key for staticblock
        required: true
        schema:
          $ref: '#/definitions/path'
        default: string
      - in: body
        name: scope
        description: The key for staticblock
        required: true
        schema:
          $ref: '#/definitions/path'
        default: string
      - in: body
        name: state
        description: The key for staticblock
        required: true
        schema:
          $ref: '#/definitions/path'
        default: string
      responses:
        "200":
          description: '{string}'
        "403":
          description: body is empty
  /client/{clientID}:
    get:
      tags:
      - client
      description: get user by uid
      operationId: ClientController.Get
      parameters:
      - in: path
        name: clientID
        description: The key for client(clientId)
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Application'
        "403":
          description: :client is empty
  /client/putClient:
    post:
      tags:
      - client
      description: create client app
      operationId: ClientController.Create App
      parameters:
      - in: body
        name: clientId
        description: clientId
        required: true
        schema:
          $ref: '#/definitions/controllers.ClientDto'
      responses:
        "200":
          description: '{string}'
        "403":
          description: body is empty
  /user/:
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/controllers.userDto'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{bsKey}/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: username
        description: Get by Username
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.OauthUser'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: username
        description: The username you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/controllers.userDto'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
definitions:
  controllers.ClientDto:
    title: ClientDto
    type: object
    properties:
      Key:
        type: string
      RedirectURI:
        type: string
      Secret:
        type: string
  controllers.userDto:
    title: userDto
    type: object
  models.Application:
    title: Application
    type: object
    properties:
      ApplicationDescription:
        type: string
      ApplicationName:
        type: string
      AuthorizeCallBackURL:
        type: string
      ClientID:
        type: string
      ClientSecret:
        type: string
      HomepageURL:
        type: string
      ImageURL:
        type: string
  models.MyGormModel:
    title: MyGormModel
    type: object
    properties:
      CreatedAt:
        type: string
        format: datetime
      DeletedAt:
        type: string
        format: datetime
      ID:
        type: string
      UpdatedAt:
        type: string
        format: datetime
  models.OauthRole:
    title: OauthRole
    type: object
    properties:
      CreatedAt:
        type: string
        format: datetime
      DeletedAt:
        type: string
        format: datetime
      ID:
        type: string
      Name:
        type: string
      UpdatedAt:
        type: string
        format: datetime
  models.OauthUser:
    title: OauthUser
    type: object
    properties:
      CreatedAt:
        type: string
        format: datetime
      DeletedAt:
        type: string
        format: datetime
      ID:
        type: string
      Password:
        $ref: '#/definitions/sql.NullString'
      Role:
        $ref: '#/definitions/models.OauthRole'
      RoleID:
        $ref: '#/definitions/sql.NullString'
      UpdatedAt:
        type: string
        format: datetime
      Username:
        type: string
  models.TimestampModel:
    title: TimestampModel
    type: object
    properties:
      CreatedAt:
        type: string
        format: datetime
      DeletedAt:
        type: string
        format: datetime
      UpdatedAt:
        type: string
        format: datetime
  models.User:
    title: User
    type: object
  path:
    title: path
    type: object
  sql.NullString:
    title: NullString
    type: object
tags:
- name: client
  description: |
    Operations about Users
- name: user
  description: |
    Operations about Users
- name: authorize
  description: |
    Operations about AuthController
